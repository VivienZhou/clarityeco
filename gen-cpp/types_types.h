/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef types_TYPES_H
#define types_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class THostPort;

class QueryInput;

class QuerySpec;

class RegMessage;

class LatencyStat;

typedef struct _THostPort__isset {
  _THostPort__isset() : ip(false), port(false) {}
  bool ip :1;
  bool port :1;
} _THostPort__isset;

class THostPort {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  THostPort(const THostPort&);
  THostPort& operator=(const THostPort&);
  THostPort() : ip(), port(0) {
  }

  virtual ~THostPort() throw();
  std::string ip;
  int32_t port;

  _THostPort__isset __isset;

  void __set_ip(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const THostPort & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const THostPort &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THostPort & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THostPort& obj);
};

void swap(THostPort &a, THostPort &b);

typedef struct _QueryInput__isset {
  _QueryInput__isset() : type(false), data(false), tags(false) {}
  bool type :1;
  bool data :1;
  bool tags :1;
} _QueryInput__isset;

class QueryInput {
 public:

  static const char* ascii_fingerprint; // = "281FB6B0D0810135ACABAD7D0144DDAC";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0x1F,0xB6,0xB0,0xD0,0x81,0x01,0x35,0xAC,0xAB,0xAD,0x7D,0x01,0x44,0xDD,0xAC};

  QueryInput(const QueryInput&);
  QueryInput& operator=(const QueryInput&);
  QueryInput() : type() {
  }

  virtual ~QueryInput() throw();
  std::string type;
  std::vector<std::string>  data;
  std::vector<std::string>  tags;

  _QueryInput__isset __isset;

  void __set_type(const std::string& val);

  void __set_data(const std::vector<std::string> & val);

  void __set_tags(const std::vector<std::string> & val);

  bool operator == (const QueryInput & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(data == rhs.data))
      return false;
    if (__isset.tags != rhs.__isset.tags)
      return false;
    else if (__isset.tags && !(tags == rhs.tags))
      return false;
    return true;
  }
  bool operator != (const QueryInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryInput& obj);
};

void swap(QueryInput &a, QueryInput &b);

typedef struct _QuerySpec__isset {
  _QuerySpec__isset() : name(false), content(false) {}
  bool name :1;
  bool content :1;
} _QuerySpec__isset;

class QuerySpec {
 public:

  static const char* ascii_fingerprint; // = "363241BE6811346EA1A56868DDCC4308";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x32,0x41,0xBE,0x68,0x11,0x34,0x6E,0xA1,0xA5,0x68,0x68,0xDD,0xCC,0x43,0x08};

  QuerySpec(const QuerySpec&);
  QuerySpec& operator=(const QuerySpec&);
  QuerySpec() : name() {
  }

  virtual ~QuerySpec() throw();
  std::string name;
  std::vector<QueryInput>  content;

  _QuerySpec__isset __isset;

  void __set_name(const std::string& val);

  void __set_content(const std::vector<QueryInput> & val);

  bool operator == (const QuerySpec & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const QuerySpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuerySpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QuerySpec& obj);
};

void swap(QuerySpec &a, QuerySpec &b);

typedef struct _RegMessage__isset {
  _RegMessage__isset() : app_name(false), endpoint(false) {}
  bool app_name :1;
  bool endpoint :1;
} _RegMessage__isset;

class RegMessage {
 public:

  static const char* ascii_fingerprint; // = "8A6FE535189D3403D9FD6C98A103F76F";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x6F,0xE5,0x35,0x18,0x9D,0x34,0x03,0xD9,0xFD,0x6C,0x98,0xA1,0x03,0xF7,0x6F};

  RegMessage(const RegMessage&);
  RegMessage& operator=(const RegMessage&);
  RegMessage() : app_name() {
  }

  virtual ~RegMessage() throw();
  std::string app_name;
  THostPort endpoint;

  _RegMessage__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_endpoint(const THostPort& val);

  bool operator == (const RegMessage & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    return true;
  }
  bool operator != (const RegMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegMessage& obj);
};

void swap(RegMessage &a, RegMessage &b);

typedef struct _LatencyStat__isset {
  _LatencyStat__isset() : hostport(false), latency(false) {}
  bool hostport :1;
  bool latency :1;
} _LatencyStat__isset;

class LatencyStat {
 public:

  static const char* ascii_fingerprint; // = "09E70C4FB217E12F46E0B39A783252CC";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xE7,0x0C,0x4F,0xB2,0x17,0xE1,0x2F,0x46,0xE0,0xB3,0x9A,0x78,0x32,0x52,0xCC};

  LatencyStat(const LatencyStat&);
  LatencyStat& operator=(const LatencyStat&);
  LatencyStat() : latency(0) {
  }

  virtual ~LatencyStat() throw();
  THostPort hostport;
  int64_t latency;

  _LatencyStat__isset __isset;

  void __set_hostport(const THostPort& val);

  void __set_latency(const int64_t val);

  bool operator == (const LatencyStat & rhs) const
  {
    if (!(hostport == rhs.hostport))
      return false;
    if (!(latency == rhs.latency))
      return false;
    return true;
  }
  bool operator != (const LatencyStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LatencyStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LatencyStat& obj);
};

void swap(LatencyStat &a, LatencyStat &b);



#endif
